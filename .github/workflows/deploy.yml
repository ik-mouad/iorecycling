# ===========================================
# IORecycling - Workflow de d√©ploiement
# ===========================================
#
# Ce workflow d√©ploie automatiquement l'application sur le serveur VPS
# lors des push sur les branches develop et main.
#
# SECRETS REQUIS √Ä CONFIGURER DANS GITHUB :
# ===========================================
# SSH_HOST      : Adresse IP/domaine du serveur VPS (ex: 146.59.234.174)
# SSH_USER      : Nom d'utilisateur SSH (ex: ubuntu)
# SSH_KEY       : Cl√© priv√©e SSH pour l'authentification
# SSH_PORT      : Port SSH (optionnel, d√©faut: 22)
# APP_DIR       : R√©pertoire de d√©ploiement sur le serveur (ex: /opt/iorecycling)
#
# CONFIGURATION :
# - D√©veloppement : push sur 'develop' ‚Üí d√©ploiement sur branche develop
# - Production    : push sur 'main'    ‚Üí d√©ploiement sur branche main
#
# ===========================================

name: Deploy IORecycling

on:
  push:
    branches: [ develop, main ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build backend with Maven
      run: mvn -B -f backend/pom.xml -DskipTests package

    - name: Build frontend Docker image (sanity check)
      run: docker build ./frontend -t iorecycling-frontend:test

    - name: Clean up test image
      run: docker rmi iorecycling-frontend:test || true

    # √âtape E2E (facultative - d√©commentez si n√©cessaire)
    # - name: Install Node.js
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '18'
    #     cache: 'npm'
    #
    # - name: Install dependencies
    #   run: npm ci
    #
    # - name: Install Playwright browsers
    #   run: npx playwright install --with-deps
    #
    # - name: Run E2E tests
    #   run: npx playwright test
    #   env:
    #     CI: true

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          set -e
          
          # Logs avec timestamp
          echo "$(date '+%Y-%m-%d %H:%M:%S') - D√©but du d√©ploiement IORecycling"
          
          # Aller dans le r√©pertoire de l'application
          cd ${{ secrets.APP_DIR }}
          
          # V√©rifier si le repo existe
          if [ ! -d ".git" ]; then
            echo "ERREUR: Repository Git non trouv√© dans ${{ secrets.APP_DIR }}"
            echo "Veuillez cloner le repository d'abord:"
            echo "git clone https://github.com/${{ github.repository }}.git ."
            exit 1
          fi
          
          # D√©terminer la branche cible
          BRANCH="${{ github.ref_name }}"
          if [ "$BRANCH" = "main" ]; then
            TARGET_BRANCH="main"
            ENV_TYPE="PRODUCTION"
          else
            TARGET_BRANCH="develop"
            ENV_TYPE="QUALIFICATION"
          fi
          
          echo "D√©ploiement sur environnement: $ENV_TYPE (branche: $TARGET_BRANCH)"
          
          # Mise √† jour du code source
          echo "Mise √† jour du code source..."
          git fetch origin
          git checkout $TARGET_BRANCH || git checkout -b $TARGET_BRANCH
          git reset --hard origin/$TARGET_BRANCH
          
          # V√©rifier la pr√©sence du fichier .env
          if [ ! -f ".env" ]; then
            echo "ATTENTION: Fichier .env manquant!"
            echo "Copiez env.example vers .env et configurez les variables"
            if [ -f "env.example" ]; then
              echo "Copie automatique de env.example vers .env..."
              cp env.example .env
            else
              echo "ERREUR: Fichier env.example non trouv√©"
              exit 1
            fi
          fi
          
          # Arr√™ter les services existants
          echo "Arr√™t des services existants..."
          docker compose down || true
          
          # Nettoyage des images inutilis√©es
          echo "Nettoyage des images Docker..."
          docker image prune -f || true
          
          # Rebuild & restart
          echo "Construction et d√©marrage des services..."
          docker compose up -d --build
          
          # Attendre que les services soient pr√™ts
          echo "Attente du d√©marrage des services..."
          sleep 30
          
          # V√©rification de la sant√© des services
          echo "V√©rification de la sant√© des services..."
          if docker compose ps | grep -q "unhealthy"; then
            echo "ATTENTION: Certains services ne sont pas en bonne sant√©"
            docker compose ps
            echo "V√©rifiez les logs avec: docker compose logs"
          else
            echo "Tous les services sont en bonne sant√©"
          fi
          
          echo "$(date '+%Y-%m-%d %H:%M:%S') - D√©ploiement termin√©"
          echo "Services d√©ploy√©s:"
          docker compose ps
          
          # Afficher les URLs d'acc√®s
          echo ""
          echo "üåê URLs d'acc√®s:"
          echo "Frontend: http://${{ secrets.SSH_HOST }}:88/"
          echo "API Health: http://${{ secrets.SSH_HOST }}:88/api/health"
          echo "Keycloak: http://${{ secrets.SSH_HOST }}:88/auth/"
          echo "MinIO Console: http://${{ secrets.SSH_HOST }}:9001/"